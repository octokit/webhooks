/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Schema =
  | CheckRunEvent
  | CheckSuiteEvent
  | CodeScanningAlertEvent
  | CommitCommentEvent
  | ContentReferenceEvent
  | CreateEvent
  | DeleteEvent
  | DeployKeyEvent
  | DeploymentEvent
  | DeploymentStatusEvent
  | ForkEvent
  | GithubAppAuthorizationEvent
  | GollumEvent
  | InstallationEvent
  | InstallationRepositoriesEvent
  | IntegrationInstallationEvent
  | IntegrationInstallationRepositoriesEvent
  | IssueCommentEvent
  | IssuesEvent
  | LabelEvent
  | MarketplacePurchaseEvent
  | MemberEvent
  | MembershipEvent
  | MetaEvent
  | MilestoneEvent
  | OrgBlockEvent
  | OrganizationEvent
  | PackageEvent
  | PageBuildEvent
  | PingEvent
  | ProjectEvent
  | ProjectCardEvent
  | ProjectColumnEvent
  | PublicEvent
  | PullRequestEvent
  | PullRequestReviewEvent
  | PullRequestReviewCommentEvent
  | PushEvent
  | ReleaseEvent
  | RepositoryEvent
  | RepositoryDispatchEvent
  | RepositoryImportEvent
  | RepositoryVulnerabilityAlertEvent
  | SecretScanningAlertEvent
  | SecurityAdvisoryEvent
  | SponsorshipEvent
  | StarEvent
  | StatusEvent
  | TeamEvent
  | TeamAddEvent
  | WatchEvent
  | WorkflowDispatchEvent
  | WorkflowRunEvent;
export type CheckRunEvent =
  | CheckRunCompletedEvent
  | CheckRunCreatedEvent
  | CheckRunRequestedActionEvent
  | CheckRunRerequestedEvent;
export type CheckSuiteEvent =
  | CheckSuiteCompletedEvent
  | CheckSuiteRequestedEvent
  | CheckSuiteRerequestedEvent;
export type CodeScanningAlertEvent =
  | CodeScanningAlertAppearedInBranchEvent
  | CodeScanningAlertClosedByUserEvent
  | CodeScanningAlertCreatedEvent
  | CodeScanningAlertFixedEvent
  | CodeScanningAlertReopenedEvent
  | CodeScanningAlertReopenedByUserEvent;
export type CommitCommentEvent = CommitCommentCreatedEvent;
export type ContentReferenceEvent = ContentReferenceCreatedEvent;
export type DeployKeyEvent = DeployKeyCreatedEvent | DeployKeyDeletedEvent;
export type DeploymentEvent = DeploymentCreatedEvent;
export type DeploymentStatusEvent = DeploymentStatusCreatedEvent;
export type GithubAppAuthorizationEvent = GithubAppAuthorizationRevokedEvent;
export type InstallationEvent =
  | InstallationCreatedEvent
  | InstallationDeletedEvent
  | InstallationNewPermissionsAcceptedEvent
  | InstallationSuspendedEvent
  | InstallationUnsuspendedEvent;
export type InstallationRepositoriesEvent =
  | InstallationRepositoriesAddedEvent
  | InstallationRepositoriesRemovedEvent;
export type IntegrationInstallationEvent = IntegrationInstallationCreatedEvent;
export type IntegrationInstallationRepositoriesEvent = IntegrationInstallationRepositoriesAddedEvent;
export type IssueCommentEvent =
  | IssueCommentCreatedEvent
  | IssueCommentDeletedEvent
  | IssueCommentEditedEvent;
export type IssuesEvent =
  | IssuesAssignedEvent
  | IssuesClosedEvent
  | IssuesDeletedEvent
  | IssuesDemilestonedEvent
  | IssuesEditedEvent
  | IssuesLabeledEvent
  | IssuesLockedEvent
  | IssuesMilestonedEvent
  | IssuesOpenedEvent
  | IssuesPinnedEvent
  | IssuesReopenedEvent
  | IssuesTransferredEvent
  | IssuesUnassignedEvent
  | IssuesUnlabeledEvent
  | IssuesUnlockedEvent
  | IssuesUnpinnedEvent;
export type LabelEvent =
  | LabelCreatedEvent
  | LabelDeletedEvent
  | LabelEditedEvent;
export type MarketplacePurchaseEvent =
  | MarketplacePurchaseCancelledEvent
  | MarketplacePurchaseChangedEvent
  | MarketplacePurchasePurchasedEvent;
export type MemberEvent =
  | MemberAddedEvent
  | MemberEditedEvent
  | MemberRemovedEvent;
export type MembershipEvent = MembershipAddedEvent | MembershipRemovedEvent;
export type MetaEvent = MetaDeletedEvent;
export type MilestoneEvent =
  | MilestoneClosedEvent
  | MilestoneCreatedEvent
  | MilestoneDeletedEvent
  | MilestoneEditedEvent
  | MilestoneOpenedEvent;
export type OrgBlockEvent = OrgBlockBlockedEvent | OrgBlockUnblockedEvent;
export type OrganizationEvent =
  | OrganizationDeletedEvent
  | OrganizationMemberAddedEvent
  | OrganizationMemberInvitedEvent
  | OrganizationMemberRemovedEvent
  | OrganizationRenamedEvent;
export type PackageEvent = PackagePublishedEvent | PackageUpdatedEvent;
export type ProjectEvent =
  | ProjectClosedEvent
  | ProjectCreatedEvent
  | ProjectDeletedEvent
  | ProjectEditedEvent
  | ProjectReopenedEvent;
export type ProjectCardEvent =
  | ProjectCardConvertedEvent
  | ProjectCardCreatedEvent
  | ProjectCardDeletedEvent
  | ProjectCardEditedEvent
  | ProjectCardMovedEvent;
export type ProjectColumnEvent =
  | ProjectColumnCreatedEvent
  | ProjectColumnDeletedEvent
  | ProjectColumnEditedEvent
  | ProjectColumnMovedEvent;
export type PullRequestEvent =
  | PullRequestAssignedEvent
  | PullRequestClosedEvent
  | PullRequestConvertedToDraftEvent
  | PullRequestEditedEvent
  | PullRequestLabeledEvent
  | PullRequestLockedEvent
  | PullRequestOpenedEvent
  | PullRequestReadyForReviewEvent
  | PullRequestReopenedEvent
  | PullRequestReviewRequestRemovedEvent
  | PullRequestReviewRequestedEvent
  | PullRequestSynchronizeEvent
  | PullRequestUnassignedEvent
  | PullRequestUnlabeledEvent
  | PullRequestUnlockedEvent;
export type PullRequestReviewEvent = PullRequestReviewSubmittedEvent;
export type PullRequestReviewCommentEvent =
  | PullRequestReviewCommentCreatedEvent
  | PullRequestReviewCommentDeletedEvent
  | PullRequestReviewCommentEditedEvent;
export type ReleaseEvent =
  | ReleaseCreatedEvent
  | ReleaseDeletedEvent
  | ReleaseEditedEvent
  | ReleasePrereleasedEvent
  | ReleasePublishedEvent
  | ReleaseReleasedEvent
  | ReleaseUnpublishedEvent;
export type RepositoryEvent =
  | RepositoryArchivedEvent
  | RepositoryCreatedEvent
  | RepositoryDeletedEvent
  | RepositoryEditedEvent
  | RepositoryPrivatizedEvent
  | RepositoryPublicizedEvent
  | RepositoryRenamedEvent
  | RepositoryTransferredEvent
  | RepositoryUnarchivedEvent;
export type RepositoryDispatchEvent = RepositoryDispatchOnDemandTestEvent;
export type RepositoryVulnerabilityAlertEvent =
  | RepositoryVulnerabilityAlertCreateEvent
  | RepositoryVulnerabilityAlertDismissEvent
  | RepositoryVulnerabilityAlertResolveEvent;
export type SecretScanningAlertEvent =
  | SecretScanningAlertCreatedEvent
  | SecretScanningAlertReopenedEvent
  | SecretScanningAlertResolvedEvent;
export type SecurityAdvisoryEvent =
  | SecurityAdvisoryPerformedEvent
  | SecurityAdvisoryPublishedEvent
  | SecurityAdvisoryUpdatedEvent;
export type SponsorshipEvent =
  | SponsorshipCancelledEvent
  | SponsorshipCreatedEvent
  | SponsorshipEditedEvent
  | SponsorshipPendingCancellationEvent
  | SponsorshipPendingTierChangeEvent
  | SponsorshipTierChangedEvent;
export type StarEvent = StarCreatedEvent | StarDeletedEvent;
export type TeamEvent =
  | TeamAddedToRepositoryEvent
  | TeamCreatedEvent
  | TeamDeletedEvent
  | TeamEditedEvent
  | TeamRemovedFromRepositoryEvent;
export type WatchEvent = WatchStartedEvent;
export type WorkflowRunEvent =
  | WorkflowRunCompletedEvent
  | WorkflowRunRequestedEvent;

export interface CheckRunCompletedEvent {
  action: "completed";
  check_run: {
    id: number;
    node_id?: string;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url?: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | null;
    started_at: string;
    completed_at: string | null;
    output: {
      title?: string | null;
      summary: string | null;
      text: string | null;
      annotations_count: number;
      annotations_url: string;
    };
    name: string;
    check_suite: {
      id: number;
      node_id?: string;
      head_branch: string | null;
      head_sha: string;
      status: string;
      conclusion: string | null;
      url: string;
      before: string;
      after: string;
      pull_requests: {
        url: string;
        id: number;
        number: number;
        head: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
        base: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
      }[];
      app: {
        id: number;
        slug?: string;
        node_id: string;
        owner: User;
        name: string;
        description: string | null;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions?: {
          administration?: "read" | "write";
          actions?: "read" | "write";
          checks?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          issues?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
        };
        events?: unknown[];
      };
      created_at: string;
      updated_at: string;
    };
    app: {
      id: number;
      slug?: string;
      node_id: string;
      owner: User;
      name: string;
      description: string | null;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      permissions?: {
        administration?: "read" | "write";
        checks?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        issues?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
      };
      events?: unknown[];
    };
    pull_requests: {
      url: string;
      id: number;
      number: number;
      head: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
      base: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
    }[];
  };
  requested_action?: {
    identifier?: string;
  } | null;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepoRef {
  id: number;
  url: string;
  name: string;
}
export interface User {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: "Bot" | "User" | "Organization";
  site_admin: boolean;
}
export interface Repository {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  private: boolean;
  owner: {
    login: string;
    id: number;
    name?: string | null;
    email?: string | null;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  html_url: string;
  description: string | null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: number | string;
  updated_at: string;
  pushed_at: number | string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: string | null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string | null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: string | null;
  archived: boolean;
  disabled?: boolean;
  open_issues_count: number;
  license: {
    key: string;
    name: string;
    spdx_id: string;
    url: string;
    node_id: string;
  } | null;
  forks: number;
  open_issues: number;
  watchers: number;
  stargazers?: number;
  default_branch: string;
  allow_squash_merge?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  delete_branch_on_merge?: boolean;
  master_branch?: string;
  permissions?: {
    pull: boolean;
    push: boolean;
    admin: boolean;
    maintain?: boolean;
    triage?: boolean;
  };
  public?: boolean;
}
export interface Installation {
  id: number;
  node_id: string;
}
export interface Organization {
  login: string;
  id: number;
  node_id: string;
  url: string;
  html_url?: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
}
export interface CheckRunCreatedEvent {
  action: "created";
  check_run: {
    id: number;
    node_id?: string;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url?: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | null;
    started_at: string;
    completed_at: string | null;
    output: {
      title?: string | null;
      summary: string | null;
      text: string | null;
      annotations_count: number;
      annotations_url: string;
    };
    name: string;
    check_suite: {
      id: number;
      node_id?: string;
      head_branch: string | null;
      head_sha: string;
      status: string;
      conclusion: string | null;
      url: string;
      before: string;
      after: string;
      pull_requests: {
        url: string;
        id: number;
        number: number;
        head: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
        base: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
      }[];
      app: {
        id: number;
        slug?: string;
        node_id: string;
        owner: User;
        name: string;
        description: string | null;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions?: {
          administration?: "read" | "write";
          actions?: "read" | "write";
          checks?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          issues?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
        };
        events?: unknown[];
      };
      created_at: string;
      updated_at: string;
    };
    app: {
      id: number;
      slug?: string;
      node_id: string;
      owner: User;
      name: string;
      description: string | null;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      permissions?: {
        administration?: "read" | "write";
        checks?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        issues?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
      };
      events?: unknown[];
    };
    pull_requests: {
      url: string;
      id: number;
      number: number;
      head: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
      base: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
    }[];
  };
  requested_action?: {
    identifier?: string;
  } | null;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface CheckRunRequestedActionEvent {
  action: "requested_action";
  check_run: {
    id: number;
    node_id?: string;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url?: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | null;
    started_at: string;
    completed_at: string | null;
    output: {
      title?: string | null;
      summary: string | null;
      text: string | null;
      annotations_count: number;
      annotations_url: string;
    };
    name: string;
    check_suite: {
      id: number;
      node_id?: string;
      head_branch: string | null;
      head_sha: string;
      status: string;
      conclusion: string | null;
      url: string;
      before: string;
      after: string;
      pull_requests: {
        url: string;
        id: number;
        number: number;
        head: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
        base: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
      }[];
      app: {
        id: number;
        slug?: string;
        node_id: string;
        owner: User;
        name: string;
        description: string | null;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions?: {
          administration?: "read" | "write";
          actions?: "read" | "write";
          checks?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          issues?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
        };
        events?: unknown[];
      };
      created_at: string;
      updated_at: string;
    };
    app: {
      id: number;
      slug?: string;
      node_id: string;
      owner: User;
      name: string;
      description: string | null;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      permissions?: {
        administration?: "read" | "write";
        checks?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        issues?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
      };
      events?: unknown[];
    };
    pull_requests: {
      url: string;
      id: number;
      number: number;
      head: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
      base: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
    }[];
  };
  requested_action?: {
    identifier?: string;
  } | null;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface CheckRunRerequestedEvent {
  action: "rerequested";
  check_run: {
    id: number;
    node_id?: string;
    head_sha: string;
    external_id: string;
    url: string;
    html_url: string;
    details_url?: string;
    status: "queued" | "in_progress" | "completed";
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | null;
    started_at: string;
    completed_at: string | null;
    output: {
      title?: string | null;
      summary: string | null;
      text: string | null;
      annotations_count: number;
      annotations_url: string;
    };
    name: string;
    check_suite: {
      id: number;
      node_id?: string;
      head_branch: string | null;
      head_sha: string;
      status: string;
      conclusion: string | null;
      url: string;
      before: string;
      after: string;
      pull_requests: {
        url: string;
        id: number;
        number: number;
        head: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
        base: {
          ref: string;
          sha: string;
          repo: RepoRef;
        };
      }[];
      app: {
        id: number;
        slug?: string;
        node_id: string;
        owner: User;
        name: string;
        description: string | null;
        external_url: string;
        html_url: string;
        created_at: string;
        updated_at: string;
        permissions?: {
          administration?: "read" | "write";
          actions?: "read" | "write";
          checks?: "read" | "write";
          contents?: "read" | "write";
          deployments?: "read" | "write";
          issues?: "read" | "write";
          members?: "read" | "write";
          metadata?: "read" | "write";
          organization_administration?: "read" | "write";
          organization_hooks?: "read" | "write";
          organization_plan?: "read" | "write";
          organization_projects?: "read" | "write";
          organization_user_blocking?: "read" | "write";
          pages?: "read" | "write";
          pull_requests?: "read" | "write";
          repository_hooks?: "read" | "write";
          repository_projects?: "read" | "write";
          statuses?: "read" | "write";
          team_discussions?: "read" | "write";
          vulnerability_alerts?: "read" | "write";
        };
        events?: unknown[];
      };
      created_at: string;
      updated_at: string;
    };
    app: {
      id: number;
      slug?: string;
      node_id: string;
      owner: User;
      name: string;
      description: string | null;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      permissions?: {
        administration?: "read" | "write";
        checks?: "read" | "write";
        contents?: "read" | "write";
        deployments?: "read" | "write";
        issues?: "read" | "write";
        members?: "read" | "write";
        metadata?: "read" | "write";
        organization_administration?: "read" | "write";
        organization_hooks?: "read" | "write";
        organization_plan?: "read" | "write";
        organization_projects?: "read" | "write";
        organization_user_blocking?: "read" | "write";
        pages?: "read" | "write";
        pull_requests?: "read" | "write";
        repository_hooks?: "read" | "write";
        repository_projects?: "read" | "write";
        statuses?: "read" | "write";
        team_discussions?: "read" | "write";
        vulnerability_alerts?: "read" | "write";
      };
      events?: unknown[];
    };
    pull_requests: {
      url: string;
      id: number;
      number: number;
      head: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
      base: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
    }[];
  };
  requested_action?: {
    identifier?: string;
  } | null;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface CheckSuiteCompletedEvent {
  action: "completed";
  check_suite: {
    id: number;
    node_id: string;
    head_branch: string | null;
    head_sha: string;
    status: "requested" | "in_progress" | "completed" | "queued" | null;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | null;
    url: string;
    before: string;
    after: string;
    pull_requests: {
      url: string;
      id: number;
      number: number;
      head: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
      base: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
    }[];
    app: {
      id: number;
      slug?: string;
      node_id: string;
      owner: User;
      name: string;
      description: string;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      permissions: {
        administration: "read" | "write";
        actions?: "read" | "write";
        checks: "read" | "write";
        contents: "read" | "write";
        deployments: "read" | "write";
        issues: "read" | "write";
        members: "read" | "write";
        metadata: "read" | "write";
        organization_administration: "read" | "write";
        organization_hooks: "read" | "write";
        organization_plan: "read" | "write";
        organization_projects: "read" | "write";
        organization_user_blocking: "read" | "write";
        pages: "read" | "write";
        pull_requests: "read" | "write";
        repository_hooks: "read" | "write";
        repository_projects: "read" | "write";
        statuses: "read" | "write";
        team_discussions: "read" | "write";
        vulnerability_alerts: "read" | "write";
      };
      events: {}[];
    };
    created_at: string;
    updated_at: string;
    latest_check_runs_count: number;
    check_runs_url: string;
    head_commit: {
      id: string;
      tree_id: string;
      message: string;
      timestamp: string;
      author: {
        name: string;
        email: string;
      };
      committer: {
        name: string;
        email: string;
      };
    };
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface CheckSuiteRequestedEvent {
  action: "requested";
  check_suite: {
    id: number;
    node_id: string;
    head_branch: string | null;
    head_sha: string;
    status: "requested" | "in_progress" | "completed" | "queued" | null;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | null;
    url: string;
    before: string;
    after: string;
    pull_requests: {
      url: string;
      id: number;
      number: number;
      head: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
      base: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
    }[];
    app: {
      id: number;
      slug?: string;
      node_id: string;
      owner: User;
      name: string;
      description: string;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      permissions: {
        administration: "read" | "write";
        actions?: "read" | "write";
        checks: "read" | "write";
        contents: "read" | "write";
        deployments: "read" | "write";
        issues: "read" | "write";
        members: "read" | "write";
        metadata: "read" | "write";
        organization_administration: "read" | "write";
        organization_hooks: "read" | "write";
        organization_plan: "read" | "write";
        organization_projects: "read" | "write";
        organization_user_blocking: "read" | "write";
        pages: "read" | "write";
        pull_requests: "read" | "write";
        repository_hooks: "read" | "write";
        repository_projects: "read" | "write";
        statuses: "read" | "write";
        team_discussions: "read" | "write";
        vulnerability_alerts: "read" | "write";
      };
      events: {}[];
    };
    created_at: string;
    updated_at: string;
    latest_check_runs_count: number;
    check_runs_url: string;
    head_commit: {
      id: string;
      tree_id: string;
      message: string;
      timestamp: string;
      author: {
        name: string;
        email: string;
      };
      committer: {
        name: string;
        email: string;
      };
    };
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface CheckSuiteRerequestedEvent {
  action: "rerequested";
  check_suite: {
    id: number;
    node_id: string;
    head_branch: string | null;
    head_sha: string;
    status: "requested" | "in_progress" | "completed" | "queued" | null;
    conclusion:
      | "success"
      | "failure"
      | "neutral"
      | "cancelled"
      | "timed_out"
      | "action_required"
      | "stale"
      | null;
    url: string;
    before: string;
    after: string;
    pull_requests: {
      url: string;
      id: number;
      number: number;
      head: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
      base: {
        ref: string;
        sha: string;
        repo: RepoRef;
      };
    }[];
    app: {
      id: number;
      slug?: string;
      node_id: string;
      owner: User;
      name: string;
      description: string;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      permissions: {
        administration: "read" | "write";
        actions?: "read" | "write";
        checks: "read" | "write";
        contents: "read" | "write";
        deployments: "read" | "write";
        issues: "read" | "write";
        members: "read" | "write";
        metadata: "read" | "write";
        organization_administration: "read" | "write";
        organization_hooks: "read" | "write";
        organization_plan: "read" | "write";
        organization_projects: "read" | "write";
        organization_user_blocking: "read" | "write";
        pages: "read" | "write";
        pull_requests: "read" | "write";
        repository_hooks: "read" | "write";
        repository_projects: "read" | "write";
        statuses: "read" | "write";
        team_discussions: "read" | "write";
        vulnerability_alerts: "read" | "write";
      };
      events: {}[];
    };
    created_at: string;
    updated_at: string;
    latest_check_runs_count: number;
    check_runs_url: string;
    head_commit: {
      id: string;
      tree_id: string;
      message: string;
      timestamp: string;
      author: {
        name: string;
        email: string;
      };
      committer: {
        name: string;
        email: string;
      };
    };
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface CodeScanningAlertAppearedInBranchEvent {
  action: "appeared_in_branch";
  alert: {
    number: number;
    created_at: string;
    url: string;
    html_url: string;
    instances: {
      ref: string;
      analysis_key: string;
      environment: string;
      state: string;
    }[];
    state: string;
    dismissed_by: null;
    dismissed_at: string | null;
    dismissed_reason: string | null;
    rule: {
      id: string;
      severity: string;
      description: string;
    };
    tool: {
      name: string;
      version: null;
    };
  };
  ref: string;
  commit_oid: string;
  repository: Repository;
  sender?: User;
  installation?: Installation;
  organization: Organization;
}
export interface CodeScanningAlertClosedByUserEvent {
  action: "closed_by_user";
  alert: {
    number: number;
    created_at: string;
    url: string;
    html_url: string;
    instances: {
      ref: string;
      analysis_key: string;
      environment: string;
      state: string;
    }[];
    state: string;
    dismissed_by: null;
    dismissed_at: string | null;
    dismissed_reason: string | null;
    rule: {
      id: string;
      severity: string;
      description: string;
    };
    tool: {
      name: string;
      version: null;
    };
  };
  ref: string;
  commit_oid: string;
  repository: Repository;
  sender?: User;
  installation?: Installation;
  organization: Organization;
}
export interface CodeScanningAlertCreatedEvent {
  action: "created";
  alert: {
    number: number;
    created_at: string;
    url: string;
    html_url: string;
    instances: {
      ref: string;
      analysis_key: string;
      environment: string;
      state: string;
    }[];
    state: string;
    dismissed_by: null;
    dismissed_at: string | null;
    dismissed_reason: string | null;
    rule: {
      id: string;
      severity: string;
      description: string;
    };
    tool: {
      name: string;
      version: null;
    };
  };
  ref: string;
  commit_oid: string;
  repository: Repository;
  sender?: User;
  installation?: Installation;
  organization: Organization;
}
export interface CodeScanningAlertFixedEvent {
  action: "fixed";
  alert: {
    number: number;
    created_at: string;
    url: string;
    html_url: string;
    instances: {
      ref: string;
      analysis_key: string;
      environment: string;
      state: string;
    }[];
    state: string;
    dismissed_by: null;
    dismissed_at: string | null;
    dismissed_reason: string | null;
    rule: {
      id: string;
      severity: string;
      description: string;
    };
    tool: {
      name: string;
      version: null;
    };
  };
  ref: string;
  commit_oid: string;
  repository: Repository;
  sender?: User;
  installation?: Installation;
  organization: Organization;
}
export interface CodeScanningAlertReopenedEvent {
  action: "reopened";
  alert: {
    number: number;
    created_at: string;
    url: string;
    html_url: string;
    instances: {
      ref: string;
      analysis_key: string;
      environment: string;
      state: string;
    }[];
    state: string;
    dismissed_by: null;
    dismissed_at: string | null;
    dismissed_reason: string | null;
    rule: {
      id: string;
      severity: string;
      description: string;
    };
    tool: {
      name: string;
      version: null;
    };
  };
  ref: string;
  commit_oid: string;
  repository: Repository;
  sender?: User;
  installation?: Installation;
  organization: Organization;
}
export interface CodeScanningAlertReopenedByUserEvent {
  action: "reopened_by_user";
  alert: {
    number: number;
    created_at: string;
    url: string;
    html_url: string;
    instances: {
      ref: string;
      analysis_key: string;
      environment: string;
      state: string;
    }[];
    state: string;
    dismissed_by: null;
    dismissed_at: string | null;
    dismissed_reason: string | null;
    rule: {
      id: string;
      severity: string;
      description: string;
    };
    tool: {
      name: string;
      version: null;
    };
  };
  ref: string;
  commit_oid: string;
  repository: Repository;
  sender?: User;
  installation?: Installation;
  organization: Organization;
}
export interface CommitCommentCreatedEvent {
  action: "created";
  comment: {
    url: string;
    html_url: string;
    id: number;
    node_id: string;
    user: User;
    position: null;
    line: null;
    path: null;
    commit_id: string;
    created_at: string;
    updated_at: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ContentReferenceCreatedEvent {
  action: "created";
  content_reference: {
    id: number;
    node_id: string;
    reference: string;
  };
  repository: Repository;
  sender: User;
  installation: Installation;
  organization?: Organization;
}
export interface CreateEvent {
  ref: string;
  ref_type: "tag" | "branch";
  master_branch: string;
  description: string | null;
  pusher_type: string;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface DeleteEvent {
  ref: string;
  ref_type: string;
  pusher_type: string;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface DeployKeyCreatedEvent {
  action: "created";
  key: {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface DeployKeyDeletedEvent {
  action: "deleted";
  key: {
    id: number;
    key: string;
    url: string;
    title: string;
    verified: boolean;
    created_at: string;
    read_only: boolean;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface DeploymentCreatedEvent {
  action: "created";
  deployment: {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: {};
    original_environment: string;
    environment: string;
    description: null;
    creator: User;
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
    performed_via_github_app?: null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface DeploymentStatusCreatedEvent {
  action: "created";
  deployment_status: {
    url: string;
    id: number;
    node_id: string;
    state: string;
    creator: User;
    description: string;
    environment: string;
    target_url: string;
    created_at: string;
    updated_at: string;
    deployment_url: string;
    repository_url: string;
    performed_via_github_app?: null;
  };
  deployment: {
    url: string;
    id: number;
    node_id: string;
    sha: string;
    ref: string;
    task: string;
    payload: {};
    original_environment: string;
    environment: string;
    description: null;
    creator: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    created_at: string;
    updated_at: string;
    statuses_url: string;
    repository_url: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ForkEvent {
  forkee: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: User;
    html_url: string;
    description: string | null;
    fork: true;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: number | string;
    updated_at: string;
    pushed_at: number | string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: string | null;
    archived: boolean;
    disabled?: boolean;
    open_issues_count: number;
    license:
      | {
          key: string;
          name: string;
          spdx_id: string;
          url: string;
          node_id: string;
        }
      | (string | null);
    forks: number;
    open_issues: number;
    watchers: number;
    stargazers?: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
    master_branch?: string;
    permissions?: {
      pull: boolean;
      push: boolean;
      admin: boolean;
      maintain?: boolean;
      triage?: boolean;
    };
    public: boolean;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface GithubAppAuthorizationRevokedEvent {
  action: "revoked";
  sender: User;
}
export interface GollumEvent {
  pages: {
    page_name: string;
    title: string;
    summary: null;
    action: "created" | "edited";
    sha: string;
    html_url: string;
  }[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface InstallationCreatedEvent {
  action: "created";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    app_slug?: string;
    target_id: number;
    target_type: "User" | "Organization";
    permissions: {
      administration?: string;
      checks?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      issues?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      statuses?: "read" | "write";
      metadata?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
    };
    events: string[];
    created_at: number;
    updated_at: number;
    single_file_name: string | null;
    has_multiple_single_files?: boolean;
    single_file_paths?: unknown[];
    suspended_by?: string | null;
    suspended_at?: string | null;
  };
  repositories?: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  requester?: null;
  sender: User;
}
export interface InstallationDeletedEvent {
  action: "deleted";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    app_slug?: string;
    target_id: number;
    target_type: "User" | "Organization";
    permissions: {
      administration?: string;
      checks?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      issues?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      statuses?: "read" | "write";
      metadata?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
    };
    events: string[];
    created_at: number;
    updated_at: number;
    single_file_name: string | null;
    has_multiple_single_files?: boolean;
    single_file_paths?: unknown[];
    suspended_by?: string | null;
    suspended_at?: string | null;
  };
  repositories?: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  requester?: null;
  sender: User;
}
export interface InstallationNewPermissionsAcceptedEvent {
  action: "new_permissions_accepted";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    app_slug?: string;
    target_id: number;
    target_type: "User" | "Organization";
    permissions: {
      administration?: string;
      checks?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      issues?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      statuses?: "read" | "write";
      metadata?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
    };
    events: string[];
    created_at: number;
    updated_at: number;
    single_file_name: string | null;
    has_multiple_single_files?: boolean;
    single_file_paths?: unknown[];
    suspended_by?: string | null;
    suspended_at?: string | null;
  };
  repositories?: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  requester?: null;
  sender: User;
}
export interface InstallationSuspendedEvent {
  action: "suspended";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    app_slug?: string;
    target_id: number;
    target_type: "User" | "Organization";
    permissions: {
      administration?: string;
      checks?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      issues?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      statuses?: "read" | "write";
      metadata?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
    };
    events: string[];
    created_at: number;
    updated_at: number;
    single_file_name: string | null;
    has_multiple_single_files?: boolean;
    single_file_paths?: unknown[];
    suspended_by?: string;
    suspended_at?: string;
  };
  repositories?: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  requester?: null;
  sender: User;
}
export interface InstallationUnsuspendedEvent {
  action: "unsuspended";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    app_slug?: string;
    target_id: number;
    target_type: "User" | "Organization";
    permissions: {
      administration?: string;
      checks?: "read" | "write";
      contents?: "read" | "write";
      deployments?: "read" | "write";
      issues?: "read" | "write";
      pages?: "read" | "write";
      pull_requests?: "read" | "write";
      repository_hooks?: "read" | "write";
      repository_projects?: "read" | "write";
      statuses?: "read" | "write";
      metadata?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
    };
    events: string[];
    created_at: number;
    updated_at: number;
    single_file_name: string | null;
    has_multiple_single_files?: boolean;
    single_file_paths?: unknown[];
    suspended_by?: null;
    suspended_at?: null;
  };
  repositories?: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  requester?: null;
  sender: User;
}
export interface InstallationRepositoriesAddedEvent {
  action: "added";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: {
      administration?: "read" | "write";
      statuses?: "read" | "write";
      repository_projects?: "read" | "write";
      repository_hooks?: "read" | "write";
      pull_requests?: "read" | "write";
      pages?: "read" | "write";
      issues?: "read" | "write";
      deployments?: "read" | "write";
      contents?: "read" | "write";
      checks?: "read" | "write";
      metadata?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
    };
    events: unknown[];
    created_at: number;
    updated_at: number;
    single_file_name: string | null;
  };
  repository_selection: "all" | "selected";
  repositories_added: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  repositories_removed: unknown[];
  sender: User;
}
export interface InstallationRepositoriesRemovedEvent {
  action: "removed";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: "all" | "selected";
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: {
      administration?: "read" | "write";
      statuses?: "read" | "write";
      repository_projects?: "read" | "write";
      repository_hooks?: "read" | "write";
      pull_requests?: "read" | "write";
      pages?: "read" | "write";
      issues?: "read" | "write";
      deployments?: "read" | "write";
      contents?: "read" | "write";
      checks?: "read" | "write";
      metadata?: "read" | "write";
      vulnerability_alerts?: "read" | "write";
    };
    events: unknown[];
    created_at: number;
    updated_at: number;
    single_file_name: string | null;
  };
  repository_selection: string;
  repositories_added: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  repositories_removed: unknown[];
  sender: User;
}
export interface IntegrationInstallationCreatedEvent {
  action: "created";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: {
      administration: string;
      checks: string;
      contents: string;
      deployments: string;
      issues: string;
      pages: string;
      pull_requests: string;
      repository_hooks: string;
      repository_projects: string;
      statuses: string;
      metadata: string;
      vulnerability_alerts: string;
    };
    events: unknown[];
    created_at: number;
    updated_at: number;
    single_file_name: null;
  };
  repositories: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  sender: User;
}
export interface IntegrationInstallationRepositoriesAddedEvent {
  action: "added";
  installation: {
    id: number;
    account: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    repository_selection: string;
    access_tokens_url: string;
    repositories_url: string;
    html_url: string;
    app_id: number;
    target_id: number;
    target_type: string;
    permissions: {
      administration: string;
      statuses: string;
      repository_projects: string;
      repository_hooks: string;
      pull_requests: string;
      pages: string;
      issues: string;
      deployments: string;
      contents: string;
      checks: string;
      metadata: string;
      vulnerability_alerts: string;
    };
    events: unknown[];
    created_at: number;
    updated_at: number;
    single_file_name: null;
  };
  repository_selection: string;
  repositories_added: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
  }[];
  repositories_removed: unknown[];
  sender: User;
}
export interface IssueCommentCreatedEvent {
  action: "created";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state: "open" | "closed";
    locked: boolean;
    assignee: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    };
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    body: string;
  };
  comment: {
    url: string;
    html_url: string;
    issue_url: string;
    id: number;
    node_id: string;
    user: User;
    created_at: string;
    updated_at: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssueCommentDeletedEvent {
  action: "deleted";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state: "open" | "closed";
    locked: boolean;
    assignee: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    };
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    body: string;
  };
  comment: {
    url: string;
    html_url: string;
    issue_url: string;
    id: number;
    node_id: string;
    user: User;
    created_at: string;
    updated_at: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssueCommentEditedEvent {
  action: "edited";
  changes: {
    body?: {
      from: string;
    };
  };
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state: "open" | "closed";
    locked: boolean;
    assignee: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    };
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    body: string;
  };
  comment: {
    url: string;
    html_url: string;
    issue_url: string;
    id: number;
    node_id: string;
    user: User;
    created_at: string;
    updated_at: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    body: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesAssignedEvent {
  action: "assigned";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesClosedEvent {
  action: "closed";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesDeletedEvent {
  action: "deleted";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesDemilestonedEvent {
  action: "demilestoned";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesEditedEvent {
  action: "edited";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  changes: {
    body?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesLabeledEvent {
  action: "labeled";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesLockedEvent {
  action: "locked";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: true;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam";
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesMilestonedEvent {
  action: "milestoned";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesOpenedEvent {
  action: "opened";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesPinnedEvent {
  action: "pinned";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesReopenedEvent {
  action: "reopened";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesTransferredEvent {
  action: "transferred";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesUnassignedEvent {
  action: "unassigned";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesUnlabeledEvent {
  action: "unlabeled";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesUnlockedEvent {
  action: "unlocked";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: false;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface IssuesUnpinnedEvent {
  action: "unpinned";
  issue: {
    url: string;
    repository_url: string;
    labels_url: string;
    comments_url: string;
    events_url: string;
    html_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    user: User;
    labels?: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    state?: "open" | "closed";
    locked?: boolean;
    assignee?: User | null;
    assignees: User[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string;
    } | null;
    comments: number;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    performed_via_github_app?: null;
    pull_request?: {
      url?: string;
      html_url?: string;
      diff_url?: string;
      patch_url?: string;
    };
    body: string;
  };
  label?: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
  };
  assignee?: User | null;
  assignees?: User[];
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface LabelCreatedEvent {
  action: "created";
  label: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description?: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface LabelDeletedEvent {
  action: "deleted";
  label: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description?: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface LabelEditedEvent {
  action: "edited";
  label: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
    description?: string | null;
  };
  changes?: {
    color?: {
      from: string;
    };
    name?: {
      from: string;
    };
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface MarketplacePurchaseCancelledEvent {
  action: "cancelled";
  effective_date: string;
  sender: {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    email: string;
  };
  marketplace_purchase: {
    account: {
      type: string;
      id: number;
      login: string;
      organization_billing_email: string;
    };
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date: string;
    plan: {
      id: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      bullets: string[];
    };
  };
  previous_marketplace_purchase?: {
    account: {
      type: string;
      id: number;
      login: string;
      organization_billing_email: string;
    };
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date?: string;
    plan: {
      id: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      bullets: string[];
    };
  };
}
export interface MarketplacePurchaseChangedEvent {
  action: "changed";
  effective_date: string;
  sender: {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    email: string;
  };
  marketplace_purchase: {
    account: {
      type: string;
      id: number;
      login: string;
      organization_billing_email: string;
    };
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date: string;
    plan: {
      id: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      bullets: string[];
    };
  };
  previous_marketplace_purchase?: {
    account: {
      type: string;
      id: number;
      login: string;
      organization_billing_email: string;
    };
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date?: string;
    plan: {
      id: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      bullets: string[];
    };
  };
}
export interface MarketplacePurchasePurchasedEvent {
  action: "purchased";
  effective_date: string;
  sender: {
    login: string;
    id: number;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
    email: string;
  };
  marketplace_purchase: {
    account: {
      type: string;
      id: number;
      login: string;
      organization_billing_email: string;
    };
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date: string;
    plan: {
      id: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      bullets: string[];
    };
  };
  previous_marketplace_purchase?: {
    account: {
      type: string;
      id: number;
      login: string;
      organization_billing_email: string;
    };
    billing_cycle: string;
    unit_count: number;
    on_free_trial: boolean;
    free_trial_ends_on: null;
    next_billing_date?: string;
    plan: {
      id: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      bullets: string[];
    };
  };
}
export interface MemberAddedEvent {
  action: "added";
  member: User;
  repository: Repository;
  installation?: Installation;
  sender: User;
}
export interface MemberEditedEvent {
  action: "edited";
  member: User;
  changes: {
    old_permission: {
      from: string;
    };
  };
  repository: Repository;
  installation?: Installation;
  sender: User;
}
export interface MemberRemovedEvent {
  action: "removed";
  member: User;
  repository: Repository;
  installation?: Installation;
  sender: User;
}
export interface MembershipAddedEvent {
  action: "added";
  scope: "team";
  member: User;
  sender: User;
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  organization: Organization;
  installation?: Installation;
}
export interface MembershipRemovedEvent {
  action: "removed";
  scope: "team";
  member: User;
  sender: User;
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  organization: Organization;
  installation?: Installation;
}
export interface MetaDeletedEvent {
  action: "deleted";
  hook_id: number;
  hook: {
    type: string;
    id: number;
    name: string;
    active: boolean;
    events: string[];
    config: {
      content_type: string;
      insecure_ssl: string;
      url: string;
    };
    updated_at: string;
    created_at: string;
  };
  repository: Repository;
  sender: User;
}
export interface MilestoneClosedEvent {
  action: "closed";
  milestone: {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: User;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface MilestoneCreatedEvent {
  action: "created";
  milestone: {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: User;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface MilestoneDeletedEvent {
  action: "deleted";
  milestone: {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: User;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface MilestoneEditedEvent {
  action: "edited";
  changes: {
    description?: {
      from: string;
    };
    due_on?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  milestone: {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: User;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface MilestoneOpenedEvent {
  action: "opened";
  milestone: {
    url: string;
    html_url: string;
    labels_url: string;
    id: number;
    node_id: string;
    number: number;
    title: string;
    description: string;
    creator: User;
    open_issues: number;
    closed_issues: number;
    state: string;
    created_at: string;
    updated_at: string;
    due_on: string;
    closed_at: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface OrgBlockBlockedEvent {
  action: "blocked";
  blocked_user: User;
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface OrgBlockUnblockedEvent {
  action: "unblocked";
  blocked_user: User;
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface OrganizationDeletedEvent {
  action: "deleted";
  membership: {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    user: User;
  };
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface OrganizationMemberAddedEvent {
  action: "member_added";
  membership: {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    user: User;
  };
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface OrganizationMemberInvitedEvent {
  action: "member_invited";
  invitation: {};
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface OrganizationMemberRemovedEvent {
  action: "member_removed";
  membership: {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    user: User;
  };
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface OrganizationRenamedEvent {
  action: "renamed";
  membership: {
    url: string;
    state: string;
    role: string;
    organization_url: string;
    user: User;
  };
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface PackagePublishedEvent {
  action: "published";
  package: {
    id: number;
    name: string;
    package_type: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    owner: User;
    package_version: {
      id: number;
      version: string;
      summary: string;
      body: string;
      body_html: string;
      release: {
        url: string;
        html_url: string;
        id: number;
        tag_name: string;
        target_commitish: string;
        name: string;
        draft: boolean;
        author: User;
        prerelease: boolean;
        created_at: string;
        published_at: string;
      };
      manifest: string;
      html_url: string;
      tag_name: string;
      target_commitish: string;
      target_oid: string;
      draft: boolean;
      prerelease: boolean;
      created_at: string;
      updated_at: string;
      metadata: unknown[];
      package_files: {
        download_url: string;
        id: number;
        name: string;
        sha256: string;
        sha1: string;
        md5: string;
        content_type: string;
        state: string;
        size: number;
        created_at: string;
        updated_at: string;
      }[];
      author: User;
      installation_command: string;
    };
    registry: {
      about_url: string;
      name: string;
      type: string;
      url: string;
      vendor: string;
    };
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
}
export interface PackageUpdatedEvent {
  action: "updated";
  package: {
    id: number;
    name: string;
    package_type: string;
    html_url: string;
    created_at: string;
    updated_at: string;
    owner: User;
    package_version: {
      id: number;
      version: string;
      summary: string;
      body: string;
      body_html: string;
      release: {
        url: string;
        html_url: string;
        id: number;
        tag_name: string;
        target_commitish: string;
        name: string;
        draft: boolean;
        author: User;
        prerelease: boolean;
        created_at: string;
        published_at: string;
      };
      manifest: string;
      html_url: string;
      tag_name: string;
      target_commitish: string;
      target_oid: string;
      draft: boolean;
      prerelease: boolean;
      created_at: string;
      updated_at: string;
      metadata: unknown[];
      package_files: {
        download_url: string;
        id: number;
        name: string;
        sha256: string;
        sha1: string;
        md5: string;
        content_type: string;
        state: string;
        size: number;
        created_at: string;
        updated_at: string;
      }[];
      author: User;
      installation_command: string;
    };
    registry: {
      about_url: string;
      name: string;
      type: string;
      url: string;
      vendor: string;
    };
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
}
export interface PageBuildEvent {
  id: number;
  build: {
    url: string;
    status: string;
    error: {
      message: null;
    };
    pusher: User;
    commit: string;
    duration: number;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface PingEvent {
  zen: string;
  hook_id: number;
  hook: {
    type: string;
    id: number;
    name: string;
    active: boolean;
    events: string[];
    config: {
      content_type: string;
      secret?: string;
      url: string;
      insecure_ssl: string;
    };
    updated_at: string;
    created_at: string;
    url: string;
    test_url?: string;
    ping_url: string;
    last_response?: {
      code: null;
      status: string;
      message: null;
    };
  };
  repository?: Repository;
  sender?: User;
  organization?: Organization;
}
export interface ProjectClosedEvent {
  action: "closed";
  project: {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: User;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectCreatedEvent {
  action: "created";
  project: {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: User;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectDeletedEvent {
  action: "deleted";
  project: {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: User;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectEditedEvent {
  action: "edited";
  changes: {
    name?: {
      from: string;
    };
    body?: {
      from: string;
    };
  };
  project: {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: User;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectReopenedEvent {
  action: "reopened";
  project: {
    owner_url: string;
    url: string;
    html_url: string;
    columns_url: string;
    id: number;
    node_id: string;
    name: string;
    body: string;
    number: number;
    state: string;
    creator: User;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectCardConvertedEvent {
  action: "converted";
  project_card: {
    url: string;
    project_url: string;
    column_url: string;
    column_id: number;
    id: number;
    node_id: string;
    note: string;
    archived: boolean;
    creator: User;
    created_at: string;
    updated_at: string;
    content_url: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
  installation?: Installation;
}
export interface ProjectCardCreatedEvent {
  action: "created";
  project_card: {
    url: string;
    project_url: string;
    column_url: string;
    column_id: number;
    id: number;
    node_id: string;
    note: string;
    archived: boolean;
    creator: User;
    created_at: string;
    updated_at: string;
    content_url: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
  installation?: Installation;
}
export interface ProjectCardDeletedEvent {
  action: "deleted";
  project_card: {
    url: string;
    project_url: string;
    column_url: string;
    column_id: number;
    id: number;
    node_id: string;
    note: string;
    archived: boolean;
    creator: User;
    created_at: string;
    updated_at: string;
    content_url: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
  installation?: Installation;
}
export interface ProjectCardEditedEvent {
  action: "edited";
  project_card: {
    url: string;
    project_url: string;
    column_url: string;
    column_id: number;
    id: number;
    node_id: string;
    note: string;
    archived: boolean;
    creator: User;
    created_at: string;
    updated_at: string;
    content_url: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
  installation?: Installation;
}
export interface ProjectCardMovedEvent {
  action: "moved";
  project_card: {
    url: string;
    project_url: string;
    column_url: string;
    column_id: number;
    id: number;
    node_id: string;
    note: string;
    archived: boolean;
    creator: User;
    created_at: string;
    updated_at: string;
    content_url: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
  installation?: Installation;
}
export interface ProjectColumnCreatedEvent {
  action: "created";
  project_column: {
    url: string;
    project_url: string;
    cards_url: string;
    id: number;
    node_id: string;
    name: string;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectColumnDeletedEvent {
  action: "deleted";
  project_column: {
    url: string;
    project_url: string;
    cards_url: string;
    id: number;
    node_id: string;
    name: string;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectColumnEditedEvent {
  action: "edited";
  project_column: {
    url: string;
    project_url: string;
    cards_url: string;
    id: number;
    node_id: string;
    name: string;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ProjectColumnMovedEvent {
  action: "moved";
  project_column: {
    url: string;
    project_url: string;
    cards_url: string;
    id: number;
    node_id: string;
    name: string;
    created_at: string;
    updated_at: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface PublicEvent {
  repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: false;
    owner: User;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: number | string;
    updated_at: string;
    pushed_at: number | string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: string | null;
    archived: boolean;
    disabled?: boolean;
    open_issues_count: number;
    license:
      | {
          key: string;
          name: string;
          spdx_id: string;
          url: string;
          node_id: string;
        }
      | (string | null);
    forks: number;
    open_issues: number;
    watchers: number;
    stargazers?: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
    master_branch?: string;
    permissions?: {
      pull: boolean;
      push: boolean;
      admin: boolean;
      maintain?: boolean;
      triage?: boolean;
    };
  };
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface PullRequestAssignedEvent {
  action: "assigned";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestClosedEvent {
  action: "closed";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestConvertedToDraftEvent {
  action: "converted_to_draft";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: true;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestEditedEvent {
  action: "edited";
  number: number;
  changes: {
    body?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestLabeledEvent {
  action: "labeled";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestLockedEvent {
  action: "locked";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: true;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam";
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestOpenedEvent {
  action: "opened";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReadyForReviewEvent {
  action: "ready_for_review";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: false;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReopenedEvent {
  action: "reopened";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: null;
    merged_at: null;
    merge_commit_sha: null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReviewRequestRemovedEvent {
  action: "review_request_removed";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReviewRequestedEvent {
  action: "review_requested";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestSynchronizeEvent {
  action: "synchronize";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestUnassignedEvent {
  action: "unassigned";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestUnlabeledEvent {
  action: "unlabeled";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: "resolved" | "off-topic" | "too heated" | "spam" | null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestUnlockedEvent {
  action: "unlocked";
  number: number;
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: false;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: User[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    active_lock_reason: null;
    draft: boolean;
    merged: boolean;
    mergeable: boolean | null;
    rebaseable: boolean | null;
    mergeable_state: string;
    merged_by: null;
    comments: number;
    review_comments: number;
    maintainer_can_modify: boolean;
    commits: number;
    additions: number;
    deletions: number;
    changed_files: number;
  };
  label?: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    color: string;
    default: boolean;
  };
  assignee?: {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: string;
    site_admin: boolean;
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReviewSubmittedEvent {
  action: "submitted";
  review: {
    id: number;
    node_id: string;
    user: User;
    body: string | null;
    commit_id: string;
    submitted_at: string;
    state: string;
    html_url: string;
    pull_request_url: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    _links: {
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
  };
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: unknown[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
      };
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: {
        login: string;
        id: number;
        node_id: string;
        avatar_url: string;
        gravatar_id: string;
        url: string;
        html_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        starred_url: string;
        subscriptions_url: string;
        organizations_url: string;
        repos_url: string;
        events_url: string;
        received_events_url: string;
        type: string;
        site_admin: boolean;
      };
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReviewCommentCreatedEvent {
  action: "created";
  comment: {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
  };
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: unknown[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReviewCommentDeletedEvent {
  action: "deleted";
  comment: {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
  };
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: unknown[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PullRequestReviewCommentEditedEvent {
  action: "edited";
  changes: {
    body?: {
      from: string;
    };
  };
  comment: {
    url: string;
    pull_request_review_id: number;
    id: number;
    node_id: string;
    diff_hunk: string;
    path: string;
    position: number;
    original_position: number;
    commit_id: string;
    original_commit_id: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    html_url: string;
    pull_request_url: string;
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      pull_request: {
        href: string;
      };
    };
  };
  pull_request: {
    url: string;
    id: number;
    node_id: string;
    html_url: string;
    diff_url: string;
    patch_url: string;
    issue_url: string;
    number: number;
    state: "open" | "closed";
    locked: boolean;
    title: string;
    user: User;
    body: string;
    created_at: string;
    updated_at: string;
    closed_at: string | null;
    merged_at: string | null;
    merge_commit_sha: string | null;
    assignee: User | null;
    assignees: User[];
    requested_reviewers: unknown[];
    requested_teams: unknown[];
    labels: {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
    }[];
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      description: string;
      creator: User;
      open_issues: number;
      closed_issues: number;
      state: string;
      created_at: string;
      updated_at: string;
      due_on: string;
      closed_at: string | null;
    } | null;
    commits_url: string;
    review_comments_url: string;
    review_comment_url: string;
    comments_url: string;
    statuses_url: string;
    head: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    base: {
      label: string;
      ref: string;
      sha: string;
      user: User;
      repo: Repository;
    };
    _links: {
      self: {
        href: string;
      };
      html: {
        href: string;
      };
      issue: {
        href: string;
      };
      comments: {
        href: string;
      };
      review_comments: {
        href: string;
      };
      review_comment: {
        href: string;
      };
      commits: {
        href: string;
      };
      statuses: {
        href: string;
      };
    };
    author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
  };
  repository: Repository;
  installation?: Installation;
  organization?: Organization;
  sender: User;
}
export interface PushEvent {
  ref: string;
  before: string;
  after: string;
  created: boolean;
  deleted: boolean;
  forced: boolean;
  base_ref: null;
  compare: string;
  commits: {
    id: string;
    tree_id: string;
    distinct: boolean;
    message: string;
    timestamp: string;
    url: string;
    author: {
      name: string;
      email: string;
      username: string;
    };
    committer: {
      name: string;
      email: string;
      username: string;
    };
    added: string[];
    removed: string[];
    modified: string[];
  }[];
  head_commit: {
    id: string;
    tree_id: string;
    distinct: boolean;
    message: string;
    timestamp: string;
    url: string;
    author: {
      name: string;
      email: string;
      username: string;
    };
    committer: {
      name: string;
      email: string;
      username: string;
    };
    added: string[];
    removed: string[];
    modified: string[];
  } | null;
  repository: Repository;
  pusher: {
    name: string;
    email: string;
  };
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ReleaseCreatedEvent {
  action: "created";
  release: {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: User;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      name: string;
      label: string;
      state: string;
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader?: User;
    }[];
    tarball_url: string;
    zipball_url: string;
    body: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ReleaseDeletedEvent {
  action: "deleted";
  release: {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: User;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      name: string;
      label: string;
      state: string;
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader?: User;
    }[];
    tarball_url: string;
    zipball_url: string;
    body: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ReleaseEditedEvent {
  action: "edited";
  changes: {
    body?: {
      from: string;
    };
    name?: {
      from: string;
    };
  };
  release: {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: User;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      name: string;
      label: string;
      state: string;
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader?: User;
    }[];
    tarball_url: string;
    zipball_url: string;
    body: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ReleasePrereleasedEvent {
  action: "prereleased";
  release: {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: User;
    prerelease: true;
    created_at: string;
    published_at: string;
    assets: {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      name: string;
      label: string;
      state: string;
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader?: User;
    }[];
    tarball_url: string;
    zipball_url: string;
    body: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ReleasePublishedEvent {
  action: "published";
  release: {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: User;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      name: string;
      label: string;
      state: string;
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader?: User;
    }[];
    tarball_url: string;
    zipball_url: string;
    body: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ReleaseReleasedEvent {
  action: "released";
  release: {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: User;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      name: string;
      label: string;
      state: string;
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader?: User;
    }[];
    tarball_url: string;
    zipball_url: string;
    body: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface ReleaseUnpublishedEvent {
  action: "unpublished";
  release: {
    url: string;
    assets_url: string;
    upload_url: string;
    html_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: null;
    draft: boolean;
    author: User;
    prerelease: boolean;
    created_at: string;
    published_at: string;
    assets: {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      name: string;
      label: string;
      state: string;
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader?: User;
    }[];
    tarball_url: string;
    zipball_url: string;
    body: string | null;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryArchivedEvent {
  action: "archived";
  repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: User;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: number | string;
    updated_at: string;
    pushed_at: number | string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: string | null;
    archived: true;
    disabled?: boolean;
    open_issues_count: number;
    license:
      | {
          key: string;
          name: string;
          spdx_id: string;
          url: string;
          node_id: string;
        }
      | (string | null);
    forks: number;
    open_issues: number;
    watchers: number;
    stargazers?: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
    master_branch?: string;
    permissions?: {
      pull: boolean;
      push: boolean;
      admin: boolean;
      maintain?: boolean;
      triage?: boolean;
    };
  };
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryCreatedEvent {
  action: "created";
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryDeletedEvent {
  action: "deleted";
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryEditedEvent {
  action: "edited";
  changes: {
    description?: {
      from: string;
    };
    default_branch?: {
      from: string;
    };
    homepage?: {
      from: string;
    };
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryPrivatizedEvent {
  action: "privatized";
  repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: true;
    owner: User;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: number | string;
    updated_at: string;
    pushed_at: number | string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: string | null;
    archived: boolean;
    disabled?: boolean;
    open_issues_count: number;
    license:
      | {
          key: string;
          name: string;
          spdx_id: string;
          url: string;
          node_id: string;
        }
      | (string | null);
    forks: number;
    open_issues: number;
    watchers: number;
    stargazers?: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
    master_branch?: string;
    permissions?: {
      pull: boolean;
      push: boolean;
      admin: boolean;
      maintain?: boolean;
      triage?: boolean;
    };
  };
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryPublicizedEvent {
  action: "publicized";
  repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: false;
    owner: User;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: number | string;
    updated_at: string;
    pushed_at: number | string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: string | null;
    archived: boolean;
    disabled?: boolean;
    open_issues_count: number;
    license:
      | {
          key: string;
          name: string;
          spdx_id: string;
          url: string;
          node_id: string;
        }
      | (string | null);
    forks: number;
    open_issues: number;
    watchers: number;
    stargazers?: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
    master_branch?: string;
    permissions?: {
      pull: boolean;
      push: boolean;
      admin: boolean;
      maintain?: boolean;
      triage?: boolean;
    };
  };
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryRenamedEvent {
  action: "renamed";
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryTransferredEvent {
  action: "transferred";
  changes: {
    owner: {
      from: {
        user?: User;
      };
    };
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryUnarchivedEvent {
  action: "unarchived";
  repository: {
    id: number;
    node_id: string;
    name: string;
    full_name: string;
    private: boolean;
    owner: User;
    html_url: string;
    description: string | null;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_url: string;
    hooks_url: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    subscription_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: number | string;
    updated_at: string;
    pushed_at: number | string;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: string | null;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    language: string | null;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    forks_count: number;
    mirror_url: string | null;
    archived: false;
    disabled?: boolean;
    open_issues_count: number;
    license:
      | {
          key: string;
          name: string;
          spdx_id: string;
          url: string;
          node_id: string;
        }
      | (string | null);
    forks: number;
    open_issues: number;
    watchers: number;
    stargazers?: number;
    default_branch: string;
    allow_squash_merge?: boolean;
    allow_merge_commit?: boolean;
    allow_rebase_merge?: boolean;
    delete_branch_on_merge?: boolean;
    master_branch?: string;
    permissions?: {
      pull: boolean;
      push: boolean;
      admin: boolean;
      maintain?: boolean;
      triage?: boolean;
    };
  };
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryDispatchOnDemandTestEvent {
  action: "on-demand-test";
  branch: string;
  client_payload: {
    [k: string]: unknown;
  };
  repository: Repository;
  sender: User;
  installation: Installation;
  organization?: Organization;
}
export interface RepositoryImportEvent {
  status: "success" | "cancelled" | "failure";
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface RepositoryVulnerabilityAlertCreateEvent {
  action: "create";
  alert: {
    id: number;
    affected_range: string;
    affected_package_name: string;
    dismisser?: User;
    dismiss_reason?: string;
    dismissed_at?: string;
    ghsa_id?: string;
    external_reference: string;
    external_identifier: string;
    fixed_in: string;
    created_at?: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
}
export interface RepositoryVulnerabilityAlertDismissEvent {
  action: "dismiss";
  alert: {
    id: number;
    affected_range: string;
    affected_package_name: string;
    dismisser: User;
    dismiss_reason: string;
    dismissed_at: string;
    ghsa_id?: string;
    external_reference: string;
    external_identifier: string;
    fixed_in: string;
    created_at?: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
}
export interface RepositoryVulnerabilityAlertResolveEvent {
  action: "resolve";
  alert: {
    id: number;
    affected_range: string;
    affected_package_name: string;
    dismisser?: User;
    dismiss_reason?: string;
    dismissed_at?: string;
    ghsa_id?: string;
    external_reference: string;
    external_identifier: string;
    fixed_in: string;
    created_at?: string;
  };
  repository: Repository;
  sender: User;
  organization?: Organization;
}
export interface SecretScanningAlertCreatedEvent {
  action: "created";
  alert: {
    number: number;
    secret_type: string;
    resolution: null;
    resolved_by: null;
    resolved_at: null;
  };
  repository: Repository;
  organization?: Organization;
  installation?: Installation;
  sender: User;
}
export interface SecretScanningAlertReopenedEvent {
  action: "reopened";
  alert: {
    number: number;
    secret_type: string;
    resolution: null;
    resolved_by: null;
    resolved_at: null;
  };
  repository: Repository;
  organization?: Organization;
  installation?: Installation;
  sender: User;
}
export interface SecretScanningAlertResolvedEvent {
  action: "resolved";
  alert: {
    number: number;
    secret_type: string;
    resolution: "false_positive" | "wontfix" | "revoked" | "used_in_tests";
    resolved_by: User;
    resolved_at: string;
  };
  repository: Repository;
  organization?: Organization;
  installation?: Installation;
  sender: User;
}
export interface SecurityAdvisoryPerformedEvent {
  action: "performed";
  security_advisory: {
    ghsa_id: string;
    summary: string;
    description: string;
    severity: string;
    identifiers: {
      value: string;
      type: string;
    }[];
    references: {
      url: string;
    }[];
    published_at: string;
    updated_at: string;
    withdrawn_at: string | null;
    vulnerabilities: {
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
      first_patched_version: {
        identifier: string;
      } | null;
    }[];
  };
}
export interface SecurityAdvisoryPublishedEvent {
  action: "published";
  security_advisory: {
    ghsa_id: string;
    summary: string;
    description: string;
    severity: string;
    identifiers: {
      value: string;
      type: string;
    }[];
    references: {
      url: string;
    }[];
    published_at: string;
    updated_at: string;
    withdrawn_at: string | null;
    vulnerabilities: {
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
      first_patched_version: {
        identifier: string;
      } | null;
    }[];
  };
}
export interface SecurityAdvisoryUpdatedEvent {
  action: "updated";
  security_advisory: {
    ghsa_id: string;
    summary: string;
    description: string;
    severity: string;
    identifiers: {
      value: string;
      type: string;
    }[];
    references: {
      url: string;
    }[];
    published_at: string;
    updated_at: string;
    withdrawn_at: string | null;
    vulnerabilities: {
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
      first_patched_version: {
        identifier: string;
      } | null;
    }[];
  };
}
export interface SponsorshipCancelledEvent {
  action: "cancelled";
  sponsorship: {
    node_id: string;
    created_at: string;
    sponsorable: User;
    sponsor: User;
    privacy_level: string;
    tier: {
      node_id: string;
      created_at: string;
      description: string;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
    };
  };
  sender: User;
}
export interface SponsorshipCreatedEvent {
  action: "created";
  sponsorship: {
    node_id: string;
    created_at: string;
    sponsorable: User;
    sponsor: User;
    privacy_level: string;
    tier: {
      node_id: string;
      created_at: string;
      description: string;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
    };
  };
  sender: User;
}
export interface SponsorshipEditedEvent {
  action: "edited";
  sponsorship: {
    node_id: string;
    created_at: string;
    sponsorable: User;
    sponsor: User;
    privacy_level: string;
    tier: {
      node_id: string;
      created_at: string;
      description: string;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
    };
  };
  changes: {
    privacy_level?: {
      from: string;
    };
  };
  sender: User;
}
export interface SponsorshipPendingCancellationEvent {
  action: "pending_cancellation";
  sponsorship: {
    node_id: string;
    created_at: string;
    sponsorable: User;
    sponsor: User;
    privacy_level: string;
    tier: {
      node_id: string;
      created_at: string;
      description: string;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
    };
  };
  effective_date?: string;
  sender: User;
}
export interface SponsorshipPendingTierChangeEvent {
  action: "pending_tier_change";
  sponsorship: {
    node_id: string;
    created_at: string;
    sponsorable: User;
    sponsor: User;
    privacy_level: string;
    tier: {
      node_id: string;
      created_at: string;
      description: string;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
    };
  };
  effective_date?: string;
  changes: {
    tier: {
      from: {
        node_id: string;
        created_at: string;
        description: string;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
      };
    };
  };
  sender: User;
}
export interface SponsorshipTierChangedEvent {
  action: "tier_changed";
  sponsorship: {
    node_id: string;
    created_at: string;
    sponsorable: User;
    sponsor: User;
    privacy_level: string;
    tier: {
      node_id: string;
      created_at: string;
      description: string;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
    };
  };
  changes: {
    tier: {
      from: {
        node_id: string;
        created_at: string;
        description: string;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
      };
    };
  };
  sender: User;
}
export interface StarCreatedEvent {
  action: "created";
  starred_at: string;
  repository: Repository;
  sender: User;
  organization?: Organization;
}
export interface StarDeletedEvent {
  action: "deleted";
  starred_at: null;
  repository: Repository;
  sender: User;
  organization?: Organization;
}
export interface StatusEvent {
  id: number;
  sha: string;
  name: string;
  avatar_url?: string | null;
  target_url: string | null;
  context: string;
  description: string | null;
  state: "pending" | "success" | "failure" | "error";
  commit: {
    sha: string;
    node_id: string;
    commit: {
      author: {
        name: string;
        email: string;
        date: string;
      };
      committer: {
        name: string;
        email: string;
        date: string;
      };
      message: string;
      tree: {
        sha: string;
        url: string;
      };
      url: string;
      comment_count: number;
      verification: {
        verified: boolean;
        reason:
          | "expired_key"
          | "not_signing_key"
          | "gpgverify_error"
          | "gpgverify_unavailable"
          | "unsigned"
          | "unknown_signature_type"
          | "no_user"
          | "unverified_email"
          | "bad_email"
          | "unknown_key"
          | "malformed_signature"
          | "invalid"
          | "valid";
        signature: string | null;
        payload: string | null;
      };
    };
    url: string;
    html_url: string;
    comments_url: string;
    author: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    committer: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
    };
    parents: unknown[];
  };
  branches: {
    name: string;
    commit: {
      sha: string;
      url: string;
    };
    protected: boolean;
  }[];
  created_at: string;
  updated_at: string;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface TeamAddedToRepositoryEvent {
  action: "added_to_repository";
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string | null;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  repository?: Repository;
  sender: User;
  organization: Organization;
}
export interface TeamCreatedEvent {
  action: "created";
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string | null;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  repository?: Repository;
  sender: User;
  organization: Organization;
}
export interface TeamDeletedEvent {
  action: "deleted";
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string | null;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  repository?: Repository;
  sender: User;
  organization: Organization;
}
export interface TeamEditedEvent {
  action: "edited";
  changes: {
    description?: {
      from: string;
    };
    name?: {
      from: string;
    };
    privacy?: {
      from: string;
    };
    repository?: {
      permissions: {
        from: {
          admin?: boolean;
          pull?: boolean;
          push?: boolean;
        };
      };
    };
  };
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string | null;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  repository?: Repository;
  sender: User;
  organization: Organization;
}
export interface TeamRemovedFromRepositoryEvent {
  action: "removed_from_repository";
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string | null;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  repository?: Repository;
  sender: User;
  organization: Organization;
}
export interface TeamAddEvent {
  team: {
    name: string;
    id: number;
    node_id: string;
    slug: string;
    description: string;
    privacy: string;
    url: string;
    html_url: string;
    members_url: string;
    repositories_url: string;
    permission: string;
  };
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization: Organization;
}
export interface WatchStartedEvent {
  action: "started";
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization?: Organization;
}
export interface WorkflowDispatchEvent {
  inputs: {
    [k: string]: unknown;
  };
  ref: string;
  repository: Repository;
  sender: User;
  installation?: Installation;
  organization: Organization;
  workflow: string;
}
export interface WorkflowRunCompletedEvent {
  action: "completed";
  organization: Organization;
  repository: Repository;
  sender: User;
  workflow: {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  };
  workflow_run: {
    artifacts_url: string;
    cancel_url: string;
    check_suite_url: string;
    conclusion: string | null;
    created_at: string;
    event: string;
    head_branch: string;
    head_commit: {
      author: {
        email: string;
        name: string;
      };
      committer: {
        email: string;
        name: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      node_id: string;
      notifications_url: string;
      owner: User;
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    node_id: string;
    pull_requests: unknown[];
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      node_id: string;
      notifications_url: string;
      owner: User;
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_number: number;
    status: string;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url: string;
  };
  installation?: Installation;
}
export interface WorkflowRunRequestedEvent {
  action: "requested";
  organization: Organization;
  repository: Repository;
  sender: User;
  workflow: {
    badge_url: string;
    created_at: string;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: string;
    url: string;
  };
  workflow_run: {
    artifacts_url: string;
    cancel_url: string;
    check_suite_url: string;
    conclusion: string | null;
    created_at: string;
    event: string;
    head_branch: string;
    head_commit: {
      author: {
        email: string;
        name: string;
      };
      committer: {
        email: string;
        name: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      node_id: string;
      notifications_url: string;
      owner: User;
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    node_id: string;
    pull_requests: unknown[];
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      node_id: string;
      notifications_url: string;
      owner: User;
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_number: number;
    status: string;
    updated_at: string;
    url: string;
    workflow_id: number;
    workflow_url: string;
  };
  installation?: Installation;
}
export interface EventPayloadMap {
  check_run: CheckRunEvent;
  check_suite: CheckSuiteEvent;
  code_scanning_alert: CodeScanningAlertEvent;
  commit_comment: CommitCommentEvent;
  content_reference: ContentReferenceEvent;
  create: CreateEvent;
  delete: DeleteEvent;
  deploy_key: DeployKeyEvent;
  deployment: DeploymentEvent;
  deployment_status: DeploymentStatusEvent;
  fork: ForkEvent;
  github_app_authorization: GithubAppAuthorizationEvent;
  gollum: GollumEvent;
  installation: InstallationEvent;
  installation_repositories: InstallationRepositoriesEvent;
  integration_installation: IntegrationInstallationEvent;
  integration_installation_repositories: IntegrationInstallationRepositoriesEvent;
  issue_comment: IssueCommentEvent;
  issues: IssuesEvent;
  label: LabelEvent;
  marketplace_purchase: MarketplacePurchaseEvent;
  member: MemberEvent;
  membership: MembershipEvent;
  meta: MetaEvent;
  milestone: MilestoneEvent;
  org_block: OrgBlockEvent;
  organization: OrganizationEvent;
  package: PackageEvent;
  page_build: PageBuildEvent;
  ping: PingEvent;
  project: ProjectEvent;
  project_card: ProjectCardEvent;
  project_column: ProjectColumnEvent;
  public: PublicEvent;
  pull_request: PullRequestEvent;
  pull_request_review: PullRequestReviewEvent;
  pull_request_review_comment: PullRequestReviewCommentEvent;
  push: PushEvent;
  release: ReleaseEvent;
  repository: RepositoryEvent;
  repository_dispatch: RepositoryDispatchEvent;
  repository_import: RepositoryImportEvent;
  repository_vulnerability_alert: RepositoryVulnerabilityAlertEvent;
  secret_scanning_alert: SecretScanningAlertEvent;
  security_advisory: SecurityAdvisoryEvent;
  sponsorship: SponsorshipEvent;
  star: StarEvent;
  status: StatusEvent;
  team: TeamEvent;
  team_add: TeamAddEvent;
  watch: WatchEvent;
  workflow_dispatch: WorkflowDispatchEvent;
  workflow_run: WorkflowRunEvent;
}
